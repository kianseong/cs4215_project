// Generated from src/Rust.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RustLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly KW_IF = 21;
    public static readonly KW_ELSE = 22;
    public static readonly KW_WHILE = 23;
    public static readonly KW_BREAK = 24;
    public static readonly KW_CONTINUE = 25;
    public static readonly KW_FN = 26;
    public static readonly KW_RETURN = 27;
    public static readonly KW_LET = 28;
    public static readonly KW_MUT = 29;
    public static readonly INT = 30;
    public static readonly BOOL = 31;
    public static readonly IDENT = 32;
    public static readonly TYPE = 33;
    public static readonly WS = 34;
    public static readonly LineComment = 35;
    public static readonly BlockComment = 36;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'('", "')'", "'!'", "'-'", "'*'", "'/'", "'+'", "'=='", "'!='", 
        "'<'", "'<='", "'>'", "'>='", "'{'", "'}'", "';'", "':'", "'='", 
        "','", "'->'", "'if'", "'else'", "'while'", "'break'", "'continue'", 
        "'fn'", "'return'", "'let'", "'mut'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, "KW_IF", 
        "KW_ELSE", "KW_WHILE", "KW_BREAK", "KW_CONTINUE", "KW_FN", "KW_RETURN", 
        "KW_LET", "KW_MUT", "INT", "BOOL", "IDENT", "TYPE", "WS", "LineComment", 
        "BlockComment"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "KW_IF", "KW_ELSE", "KW_WHILE", 
        "KW_BREAK", "KW_CONTINUE", "KW_FN", "KW_RETURN", "KW_LET", "KW_MUT", 
        "INT", "BOOL", "IDENT", "TYPE", "WS", "LineComment", "BlockComment",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLexer._ATN, RustLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Rust.g4"; }

    public get literalNames(): (string | null)[] { return RustLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RustLexer.symbolicNames; }
    public get ruleNames(): string[] { return RustLexer.ruleNames; }

    public get serializedATN(): number[] { return RustLexer._serializedATN; }

    public get channelNames(): string[] { return RustLexer.channelNames; }

    public get modeNames(): string[] { return RustLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,36,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,29,4,29,167,8,29,11,29,12,29,168,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,180,8,30,1,31,1,31,5,31,184,8,
        31,10,31,12,31,187,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,199,8,32,1,33,4,33,202,8,33,11,33,12,33,203,1,33,
        1,33,1,34,1,34,1,34,1,34,5,34,212,8,34,10,34,12,34,215,9,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,5,35,224,8,35,10,35,12,35,227,9,35,
        1,35,1,35,4,35,231,8,35,11,35,12,35,232,1,35,1,35,4,35,237,8,35,
        11,35,12,35,238,1,35,5,35,242,8,35,10,35,12,35,245,9,35,1,35,4,35,
        248,8,35,11,35,12,35,249,1,35,1,35,1,35,1,35,0,0,36,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,
        6,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,42,42,47,47,268,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,
        11,83,1,0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,90,1,0,0,0,19,93,1,
        0,0,0,21,95,1,0,0,0,23,98,1,0,0,0,25,100,1,0,0,0,27,103,1,0,0,0,
        29,105,1,0,0,0,31,107,1,0,0,0,33,109,1,0,0,0,35,111,1,0,0,0,37,113,
        1,0,0,0,39,115,1,0,0,0,41,118,1,0,0,0,43,121,1,0,0,0,45,126,1,0,
        0,0,47,132,1,0,0,0,49,138,1,0,0,0,51,147,1,0,0,0,53,150,1,0,0,0,
        55,157,1,0,0,0,57,161,1,0,0,0,59,166,1,0,0,0,61,179,1,0,0,0,63,181,
        1,0,0,0,65,198,1,0,0,0,67,201,1,0,0,0,69,207,1,0,0,0,71,218,1,0,
        0,0,73,74,5,40,0,0,74,2,1,0,0,0,75,76,5,41,0,0,76,4,1,0,0,0,77,78,
        5,33,0,0,78,6,1,0,0,0,79,80,5,45,0,0,80,8,1,0,0,0,81,82,5,42,0,0,
        82,10,1,0,0,0,83,84,5,47,0,0,84,12,1,0,0,0,85,86,5,43,0,0,86,14,
        1,0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,16,1,0,0,0,90,91,5,33,0,
        0,91,92,5,61,0,0,92,18,1,0,0,0,93,94,5,60,0,0,94,20,1,0,0,0,95,96,
        5,60,0,0,96,97,5,61,0,0,97,22,1,0,0,0,98,99,5,62,0,0,99,24,1,0,0,
        0,100,101,5,62,0,0,101,102,5,61,0,0,102,26,1,0,0,0,103,104,5,123,
        0,0,104,28,1,0,0,0,105,106,5,125,0,0,106,30,1,0,0,0,107,108,5,59,
        0,0,108,32,1,0,0,0,109,110,5,58,0,0,110,34,1,0,0,0,111,112,5,61,
        0,0,112,36,1,0,0,0,113,114,5,44,0,0,114,38,1,0,0,0,115,116,5,45,
        0,0,116,117,5,62,0,0,117,40,1,0,0,0,118,119,5,105,0,0,119,120,5,
        102,0,0,120,42,1,0,0,0,121,122,5,101,0,0,122,123,5,108,0,0,123,124,
        5,115,0,0,124,125,5,101,0,0,125,44,1,0,0,0,126,127,5,119,0,0,127,
        128,5,104,0,0,128,129,5,105,0,0,129,130,5,108,0,0,130,131,5,101,
        0,0,131,46,1,0,0,0,132,133,5,98,0,0,133,134,5,114,0,0,134,135,5,
        101,0,0,135,136,5,97,0,0,136,137,5,107,0,0,137,48,1,0,0,0,138,139,
        5,99,0,0,139,140,5,111,0,0,140,141,5,110,0,0,141,142,5,116,0,0,142,
        143,5,105,0,0,143,144,5,110,0,0,144,145,5,117,0,0,145,146,5,101,
        0,0,146,50,1,0,0,0,147,148,5,102,0,0,148,149,5,110,0,0,149,52,1,
        0,0,0,150,151,5,114,0,0,151,152,5,101,0,0,152,153,5,116,0,0,153,
        154,5,117,0,0,154,155,5,114,0,0,155,156,5,110,0,0,156,54,1,0,0,0,
        157,158,5,108,0,0,158,159,5,101,0,0,159,160,5,116,0,0,160,56,1,0,
        0,0,161,162,5,109,0,0,162,163,5,117,0,0,163,164,5,116,0,0,164,58,
        1,0,0,0,165,167,7,0,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,
        1,0,0,0,168,169,1,0,0,0,169,60,1,0,0,0,170,171,5,116,0,0,171,172,
        5,114,0,0,172,173,5,117,0,0,173,180,5,101,0,0,174,175,5,102,0,0,
        175,176,5,97,0,0,176,177,5,108,0,0,177,178,5,115,0,0,178,180,5,101,
        0,0,179,170,1,0,0,0,179,174,1,0,0,0,180,62,1,0,0,0,181,185,7,1,0,
        0,182,184,7,2,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,
        0,185,186,1,0,0,0,186,64,1,0,0,0,187,185,1,0,0,0,188,189,5,98,0,
        0,189,190,5,111,0,0,190,191,5,111,0,0,191,199,5,108,0,0,192,193,
        5,110,0,0,193,194,5,117,0,0,194,195,5,109,0,0,195,196,5,98,0,0,196,
        197,5,101,0,0,197,199,5,114,0,0,198,188,1,0,0,0,198,192,1,0,0,0,
        199,66,1,0,0,0,200,202,7,3,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,
        201,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,6,33,0,0,206,
        68,1,0,0,0,207,208,5,47,0,0,208,209,5,47,0,0,209,213,1,0,0,0,210,
        212,8,4,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
        214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,6,34,0,0,217,
        70,1,0,0,0,218,219,5,47,0,0,219,220,5,42,0,0,220,243,1,0,0,0,221,
        242,8,5,0,0,222,224,5,47,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,
        223,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,
        242,3,71,35,0,229,231,5,47,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,
        230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,242,8,5,0,0,235,
        237,5,42,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,
        239,1,0,0,0,239,240,1,0,0,0,240,242,8,5,0,0,241,221,1,0,0,0,241,
        225,1,0,0,0,241,230,1,0,0,0,241,236,1,0,0,0,242,245,1,0,0,0,243,
        241,1,0,0,0,243,244,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,246,
        248,5,42,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,
        250,1,0,0,0,250,251,1,0,0,0,251,252,5,47,0,0,252,253,1,0,0,0,253,
        254,6,35,0,0,254,72,1,0,0,0,13,0,168,179,185,198,203,213,225,232,
        238,241,243,249,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RustLexer.__ATN) {
            RustLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLexer._serializedATN);
        }

        return RustLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RustLexer.literalNames, RustLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RustLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RustLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}