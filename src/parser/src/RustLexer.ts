// Generated from src/Rust.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RustLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly KW_IF = 24;
    public static readonly KW_ELSE = 25;
    public static readonly KW_WHILE = 26;
    public static readonly KW_BREAK = 27;
    public static readonly KW_CONTINUE = 28;
    public static readonly KW_FN = 29;
    public static readonly KW_RETURN = 30;
    public static readonly KW_LET = 31;
    public static readonly KW_MUT = 32;
    public static readonly INT = 33;
    public static readonly BOOL = 34;
    public static readonly TYPE = 35;
    public static readonly IDENT = 36;
    public static readonly WS = 37;
    public static readonly LineComment = 38;
    public static readonly BlockComment = 39;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'('", "')'", "'!'", "'-unary'", "'*'", "'/'", "'+'", "'-'", 
        "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'{'", "'}'", "';'", 
        "'['", "','", "']'", "'='", "':'", "'->'", "'if'", "'else'", "'while'", 
        "'break'", "'continue'", "'fn'", "'return'", "'let'", "'mut'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, "KW_IF", "KW_ELSE", "KW_WHILE", "KW_BREAK", "KW_CONTINUE", 
        "KW_FN", "KW_RETURN", "KW_LET", "KW_MUT", "INT", "BOOL", "TYPE", 
        "IDENT", "WS", "LineComment", "BlockComment"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "KW_IF", 
        "KW_ELSE", "KW_WHILE", "KW_BREAK", "KW_CONTINUE", "KW_FN", "KW_RETURN", 
        "KW_LET", "KW_MUT", "INT", "BOOL", "TYPE", "IDENT", "WS", "LineComment", 
        "BlockComment",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLexer._ATN, RustLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Rust.g4"; }

    public get literalNames(): (string | null)[] { return RustLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RustLexer.symbolicNames; }
    public get ruleNames(): string[] { return RustLexer.ruleNames; }

    public get serializedATN(): number[] { return RustLexer._serializedATN; }

    public get channelNames(): string[] { return RustLexer.channelNames; }

    public get modeNames(): string[] { return RustLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,39,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,
        23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,4,32,184,8,32,11,32,12,32,
        185,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,197,8,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,209,8,34,1,
        35,1,35,5,35,213,8,35,10,35,12,35,216,9,35,1,36,4,36,219,8,36,11,
        36,12,36,220,1,36,1,36,1,37,1,37,1,37,1,37,5,37,229,8,37,10,37,12,
        37,232,9,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,5,38,241,8,38,10,
        38,12,38,244,9,38,1,38,1,38,4,38,248,8,38,11,38,12,38,249,1,38,1,
        38,4,38,254,8,38,11,38,12,38,255,1,38,5,38,259,8,38,10,38,12,38,
        262,9,38,1,38,4,38,265,8,38,11,38,12,38,266,1,38,1,38,1,38,1,38,
        0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,1,0,6,1,0,48,57,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
        13,13,2,0,42,42,47,47,285,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,92,
        1,0,0,0,11,94,1,0,0,0,13,96,1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,0,
        19,103,1,0,0,0,21,106,1,0,0,0,23,108,1,0,0,0,25,111,1,0,0,0,27,113,
        1,0,0,0,29,116,1,0,0,0,31,118,1,0,0,0,33,120,1,0,0,0,35,122,1,0,
        0,0,37,124,1,0,0,0,39,126,1,0,0,0,41,128,1,0,0,0,43,130,1,0,0,0,
        45,132,1,0,0,0,47,135,1,0,0,0,49,138,1,0,0,0,51,143,1,0,0,0,53,149,
        1,0,0,0,55,155,1,0,0,0,57,164,1,0,0,0,59,167,1,0,0,0,61,174,1,0,
        0,0,63,178,1,0,0,0,65,183,1,0,0,0,67,196,1,0,0,0,69,208,1,0,0,0,
        71,210,1,0,0,0,73,218,1,0,0,0,75,224,1,0,0,0,77,235,1,0,0,0,79,80,
        5,40,0,0,80,2,1,0,0,0,81,82,5,41,0,0,82,4,1,0,0,0,83,84,5,33,0,0,
        84,6,1,0,0,0,85,86,5,45,0,0,86,87,5,117,0,0,87,88,5,110,0,0,88,89,
        5,97,0,0,89,90,5,114,0,0,90,91,5,121,0,0,91,8,1,0,0,0,92,93,5,42,
        0,0,93,10,1,0,0,0,94,95,5,47,0,0,95,12,1,0,0,0,96,97,5,43,0,0,97,
        14,1,0,0,0,98,99,5,45,0,0,99,16,1,0,0,0,100,101,5,61,0,0,101,102,
        5,61,0,0,102,18,1,0,0,0,103,104,5,33,0,0,104,105,5,61,0,0,105,20,
        1,0,0,0,106,107,5,60,0,0,107,22,1,0,0,0,108,109,5,60,0,0,109,110,
        5,61,0,0,110,24,1,0,0,0,111,112,5,62,0,0,112,26,1,0,0,0,113,114,
        5,62,0,0,114,115,5,61,0,0,115,28,1,0,0,0,116,117,5,123,0,0,117,30,
        1,0,0,0,118,119,5,125,0,0,119,32,1,0,0,0,120,121,5,59,0,0,121,34,
        1,0,0,0,122,123,5,91,0,0,123,36,1,0,0,0,124,125,5,44,0,0,125,38,
        1,0,0,0,126,127,5,93,0,0,127,40,1,0,0,0,128,129,5,61,0,0,129,42,
        1,0,0,0,130,131,5,58,0,0,131,44,1,0,0,0,132,133,5,45,0,0,133,134,
        5,62,0,0,134,46,1,0,0,0,135,136,5,105,0,0,136,137,5,102,0,0,137,
        48,1,0,0,0,138,139,5,101,0,0,139,140,5,108,0,0,140,141,5,115,0,0,
        141,142,5,101,0,0,142,50,1,0,0,0,143,144,5,119,0,0,144,145,5,104,
        0,0,145,146,5,105,0,0,146,147,5,108,0,0,147,148,5,101,0,0,148,52,
        1,0,0,0,149,150,5,98,0,0,150,151,5,114,0,0,151,152,5,101,0,0,152,
        153,5,97,0,0,153,154,5,107,0,0,154,54,1,0,0,0,155,156,5,99,0,0,156,
        157,5,111,0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,160,5,105,
        0,0,160,161,5,110,0,0,161,162,5,117,0,0,162,163,5,101,0,0,163,56,
        1,0,0,0,164,165,5,102,0,0,165,166,5,110,0,0,166,58,1,0,0,0,167,168,
        5,114,0,0,168,169,5,101,0,0,169,170,5,116,0,0,170,171,5,117,0,0,
        171,172,5,114,0,0,172,173,5,110,0,0,173,60,1,0,0,0,174,175,5,108,
        0,0,175,176,5,101,0,0,176,177,5,116,0,0,177,62,1,0,0,0,178,179,5,
        109,0,0,179,180,5,117,0,0,180,181,5,116,0,0,181,64,1,0,0,0,182,184,
        7,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,
        1,0,0,0,186,66,1,0,0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,
        5,117,0,0,190,197,5,101,0,0,191,192,5,102,0,0,192,193,5,97,0,0,193,
        194,5,108,0,0,194,195,5,115,0,0,195,197,5,101,0,0,196,187,1,0,0,
        0,196,191,1,0,0,0,197,68,1,0,0,0,198,199,5,98,0,0,199,200,5,111,
        0,0,200,201,5,111,0,0,201,209,5,108,0,0,202,203,5,110,0,0,203,204,
        5,117,0,0,204,205,5,109,0,0,205,206,5,98,0,0,206,207,5,101,0,0,207,
        209,5,114,0,0,208,198,1,0,0,0,208,202,1,0,0,0,209,70,1,0,0,0,210,
        214,7,1,0,0,211,213,7,2,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,
        212,1,0,0,0,214,215,1,0,0,0,215,72,1,0,0,0,216,214,1,0,0,0,217,219,
        7,3,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,222,1,0,0,0,222,223,6,36,0,0,223,74,1,0,0,0,224,225,
        5,47,0,0,225,226,5,47,0,0,226,230,1,0,0,0,227,229,8,4,0,0,228,227,
        1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,
        1,0,0,0,232,230,1,0,0,0,233,234,6,37,0,0,234,76,1,0,0,0,235,236,
        5,47,0,0,236,237,5,42,0,0,237,260,1,0,0,0,238,259,8,5,0,0,239,241,
        5,47,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,
        1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,259,3,77,38,0,246,248,
        5,47,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,
        1,0,0,0,250,251,1,0,0,0,251,259,8,5,0,0,252,254,5,42,0,0,253,252,
        1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,
        1,0,0,0,257,259,8,5,0,0,258,238,1,0,0,0,258,242,1,0,0,0,258,247,
        1,0,0,0,258,253,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,263,265,5,42,0,0,264,263,
        1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,268,
        1,0,0,0,268,269,5,47,0,0,269,270,1,0,0,0,270,271,6,38,0,0,271,78,
        1,0,0,0,13,0,185,196,208,214,220,230,242,249,255,258,260,266,1,6,
        0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RustLexer.__ATN) {
            RustLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLexer._serializedATN);
        }

        return RustLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RustLexer.literalNames, RustLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RustLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RustLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}